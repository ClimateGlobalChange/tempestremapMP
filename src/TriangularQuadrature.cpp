///////////////////////////////////////////////////////////////////////////////
///
///	\file    TriangularQuadrature.cpp
///	\author  Paul Ullrich
///	\version September 1, 2014
///
///	<remarks>
///		Copyright 2000-2014 Paul Ullrich
///
///		This file is distributed as part of the Tempest source code package.
///		Permission is granted to use, copy, modify and distribute this
///		source code and its documentation under the terms of the GNU General
///		Public License.  This software is provided "as is" without express
///		or implied warranty.
///	</remarks>

#include "TriangularQuadrature.h"
#include "Exception.h"

///////////////////////////////////////////////////////////////////////////////

TriangularQuadratureRule::TriangularQuadratureRule(
	int nOrder
) {
	m_nOrder = nOrder;

	// 12th order quadrature rule (33 points)
	if (nOrder == 12) {
		const double TriQuadratureG[33][3] = {
			{0.023565220452390, 0.488217389773805, 0.488217389773805},
			{0.488217389773805, 0.023565220452390, 0.488217389773805},
			{0.488217389773805, 0.488217389773805, 0.023565220452390},

			{0.120551215411079, 0.439724392294460, 0.439724392294460},
			{0.439724392294460, 0.120551215411079, 0.439724392294460},
			{0.439724392294460, 0.439724392294460, 0.120551215411079},

			{0.457579229975768, 0.271210385012116, 0.271210385012116},
			{0.271210385012116, 0.457579229975768, 0.271210385012116},
			{0.271210385012116, 0.271210385012116, 0.457579229975768},

			{0.744847708916828, 0.127576145541586, 0.127576145541586},
			{0.127576145541586, 0.744847708916828, 0.127576145541586},
			{0.127576145541586, 0.127576145541586, 0.744847708916828},

			{0.957365299093576, 0.021317350453210, 0.021317350453210},
			{0.021317350453210, 0.957365299093576, 0.021317350453210},
			{0.021317350453210, 0.021317350453210, 0.957365299093576},

			{0.115343494534698, 0.275713269685514, 0.608943235779788},
			{0.115343494534698, 0.608943235779788, 0.275713269685514},
			{0.275713269685514, 0.115343494534698, 0.608943235779788},
			{0.275713269685514, 0.608943235779788, 0.115343494534698},
			{0.608943235779788, 0.115343494534698, 0.275713269685514},
			{0.608943235779788, 0.275713269685514, 0.115343494534698},

			{0.022838332222257, 0.281325580989940, 0.695836086787803},
			{0.022838332222257, 0.695836086787803, 0.281325580989940},
			{0.281325580989940, 0.022838332222257, 0.695836086787803},
			{0.281325580989940, 0.695836086787803, 0.022838332222257},
			{0.695836086787803, 0.022838332222257, 0.281325580989940},
			{0.695836086787803, 0.281325580989940, 0.022838332222257},

			{0.025734050548330, 0.116251915907597, 0.858014033544073},
			{0.025734050548330, 0.858014033544073, 0.116251915907597},
			{0.116251915907597, 0.025734050548330, 0.858014033544073},
			{0.116251915907597, 0.858014033544073, 0.025734050548330},
			{0.858014033544073, 0.025734050548330, 0.116251915907597},
			{0.858014033544073, 0.116251915907597, 0.025734050548330}};

		const double TriQuadratureW[33] =
			{0.0257310664404561, 0.0257310664404561, 0.0257310664404561,
			 0.0436925445380381, 0.0436925445380381, 0.0436925445380381,
			 0.062858224217885, 0.062858224217885, 0.062858224217885,
			 0.034796112930709, 0.034796112930709, 0.034796112930709,
			 0.006166261051559, 0.006166261051559, 0.006166261051559,
			 0.040371557766381, 0.040371557766381, 0.040371557766381,
			 0.040371557766381, 0.040371557766381, 0.040371557766381,
			 0.022356773202303, 0.022356773202303, 0.022356773202303,
			 0.022356773202303, 0.022356773202303, 0.022356773202303,
			 0.017316231108659, 0.017316231108659, 0.017316231108659,
			 0.017316231108659, 0.017316231108659, 0.017316231108659};

		m_dG.resize(33, 3);
		memcpy(m_dG, &(TriQuadratureG[0][0]), 33 * 3 * sizeof(double));

		m_dW.resize(33);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 33 * sizeof(double));

	// 10th order quadrature rule (25 points)
	} else if (nOrder == 10) {
		const double TriQuadratureG[25][3] = {
			{0.333333333333333, 0.333333333333333, 0.333333333333333},
			{0.028844733232685, 0.485577633383657, 0.485577633383657},
			{0.485577633383657, 0.028844733232685, 0.485577633383657},
			{0.485577633383657, 0.485577633383657, 0.028844733232685},
			{0.781036849029926, 0.109481575485037, 0.109481575485037},
			{0.109481575485037, 0.781036849029926, 0.109481575485037},
			{0.109481575485037, 0.109481575485037, 0.781036849029926},
			{0.141707219414880, 0.307939838764121, 0.550352941820999},
			{0.141707219414880, 0.550352941820999, 0.307939838764121},
			{0.307939838764121, 0.141707219414880, 0.550352941820999},
			{0.307939838764121, 0.550352941820999, 0.141707219414880},
			{0.550352941820999, 0.141707219414880, 0.307939838764121},
			{0.550352941820999, 0.307939838764121, 0.141707219414880},
			{0.025003534762686, 0.246672560639903, 0.728323904597411},
			{0.025003534762686, 0.728323904597411, 0.246672560639903},
			{0.246672560639903, 0.025003534762686, 0.728323904597411},
			{0.246672560639903, 0.728323904597411, 0.025003534762686},
			{0.728323904597411, 0.025003534762686, 0.246672560639903},
			{0.728323904597411, 0.246672560639903, 0.025003534762686},
			{0.009540815400299, 0.066803251012200, 0.923655933587500},
			{0.009540815400299, 0.923655933587500, 0.066803251012200},
			{0.066803251012200, 0.009540815400299, 0.923655933587500},
			{0.066803251012200, 0.923655933587500, 0.009540815400299},
			{0.923655933587500, 0.009540815400299, 0.066803251012200},
			{0.923655933587500, 0.066803251012200, 0.009540815400299}};

		const double TriQuadratureW[25] =
			{0.0908179903827548,
			 0.036725957756467, 0.036725957756467, 0.036725957756467,
			 0.045321059435528, 0.045321059435528, 0.045321059435528,
			 0.072757916845420, 0.072757916845420, 0.072757916845420,
			 0.072757916845420, 0.072757916845420, 0.072757916845420,
			 0.028327242531057, 0.028327242531057, 0.028327242531057,
			 0.028327242531057, 0.028327242531057, 0.028327242531057,
			 0.009421666963733, 0.009421666963733, 0.009421666963733,
			 0.009421666963733, 0.009421666963733, 0.009421666963733};

		m_dG.resize(25, 3);
		memcpy(m_dG, &(TriQuadratureG[0][0]), 25 * 3 * sizeof(double));

		m_dW.resize(25);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 25 * sizeof(double));

	// 8th order quadrature rule (16 points)
	} else if (nOrder == 8) {

		const double TriQuadratureG[16][3] = {
			{0.33333333333333333333333333333333, 0.33333333333333333333333333333333,   0.},

			{0.1705693077517602066222935014994,  0.1705693077517602066222935014994,    0.},
			{0.1705693077517602066222935014994,  0.65886138449647958675541299700121,   0.},
			{0.65886138449647958675541299700121, 0.1705693077517602066222935014994,    0.},

			{0.050547228317030975458423550596387, 0.050547228317030975458423550596387, 0.},
			{0.050547228317030975458423550596387, 0.89890554336593804908315289880723,  0.},
			{0.89890554336593804908315289880723,  0.050547228317030975458423550596387, 0.},

			{0.45929258829272315602881551450124,  0.45929258829272315602881551450124,  0.},
			{0.45929258829272315602881551450124,  0.081414823414553687942368970997513, 0.},
			{0.081414823414553687942368970997513, 0.45929258829272315602881551450124,  0.},

			{0.72849239295540428124100037918962,   0.26311282963463811342178578626121,   0.},
			{0.26311282963463811342178578626121,   0.72849239295540428124100037918962,   0.},
			{0.72849239295540428124100037918962,   0.0083947774099576053372138345491687, 0.},
			{0.0083947774099576053372138345491687, 0.72849239295540428124100037918962,   0.},
			{0.26311282963463811342178578626121,   0.0083947774099576053372138345491687, 0.},
			{0.0083947774099576053372138345491687, 0.26311282963463811342178578626121,   0.}};

		const double TriQuadratureW[16] =
			{0.144315607677787168251091110499402,
			 0.103217370534718250281791550291296,
			 0.103217370534718250281791550291296,
			 0.103217370534718250281791550291296,
			 0.032458497623198080310925928340874,
			 0.032458497623198080310925928340874,
			 0.032458497623198080310925928340874,
			 0.095091634267284624793896104381774,
			 0.095091634267284624793896104381774,
			 0.095091634267284624793896104381774,
			 0.027230314174434994264844690076462,
			 0.027230314174434994264844690076462,
			 0.027230314174434994264844690076462,
			 0.027230314174434994264844690076462,
			 0.027230314174434994264844690076462,
			 0.027230314174434994264844690076462};

		m_dG.resize(16, 3);
		memcpy(m_dG, &(TriQuadratureG[0][0]), 16 * 3 * sizeof(double));

		m_dW.resize(16);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 16 * sizeof(double));

	// 4th order quadrature rule (6 points)
	} else if (nOrder == 4) {

		const double TriQuadratureG[6][3] = {
			{0.8168475729804585130808570731956,    0.0915762135097707434595714634022015, 0.},
			{0.0915762135097707434595714634022015, 0.8168475729804585130808570731956,    0.},
			{0.0915762135097707434595714634022015, 0.0915762135097707434595714634022015, 0.},
			{0.1081030181680702273633414922339,    0.445948490915964886318329253883051,  0.},
			{0.445948490915964886318329253883051,  0.1081030181680702273633414922339,    0.},
			{0.445948490915964886318329253883051,  0.445948490915964886318329253883051,  0.}};

		const double TriQuadratureW[6] =
			{0.1099517436553218676383263249002104,
			 0.1099517436553218676383263249002104,
			 0.1099517436553218676383263249002104,
			 0.223381589678011465695007008433122,
			 0.223381589678011465695007008433122,
			 0.223381589678011465695007008433122};

		m_dG.resize(6, 3);
		memcpy(m_dG, &(TriQuadratureG[0][0]), 6 * 3 * sizeof(double));

		m_dW.resize(6);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 6 * sizeof(double));

	// 1st order quadrature rule (1 point)
	} else if (nOrder == 1) {

		m_dG.resize(1, 3);
		m_dG(0,0) = 0.33333333333333333333333333333333;
		m_dG(0,1) = 0.33333333333333333333333333333333;
		m_dG(0,2) = 1.0 - m_dG(0,0) - m_dG(0,1);

		m_dW.resize(1);
		m_dW[0] = 1.0;

	// Unsupported order
	} else {
		_EXCEPTIONT("Unsupported order of TriangularQuadratureRule");
	}

	// Correct the last coordinate
	for (size_t p = 0; p < m_dG.size_y(); p++) {
		m_dG(p,2) = 1.0 - m_dG(p,0) - m_dG(p,1);
	}
}

///////////////////////////////////////////////////////////////////////////////

void TriangularQuadratureRule::validate() const {
	double wsum = 0.0;
	for (size_t p = 0; p < size(); p++) {
		double gsum = 0.0;
		for (size_t i = 0; i < m_dG.size_x(); i++) {
			gsum += m_dG(p,i);
		}
		if (gsum != 1.0) {
			printf("TriangularQuadratureRule (order %i / %lu points) coords do not add to 1 in row %lu: %1.16f\n",
				m_nOrder, size(), p, gsum);
		}

		wsum += m_dW[p];
	}
	if (wsum != 1.0) {
		printf("TriangularQuadratureRule (order %i / %lu points) weights do not add to 1: %1.16f\n",
			m_nOrder, size(), wsum);
	}
}

///////////////////////////////////////////////////////////////////////////////

